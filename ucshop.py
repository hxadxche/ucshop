import asyncpg
import asyncio
from datetime import datetime, timedelta
from yoomoney import Quickpay
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from functools import partial
import requests
from aiogram.types import ReplyKeyboardRemove
from aiogram.filters import Command
admin_router = Router()
API_URL = "https://synet.syntex-dev.ru/redeem"
API_TOKEN = "7712356486de523a"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π

DB_CONFIG = {
    'user': 'postgres',
    'password': 'xRbtSljvnJweJPlmYvjbiCdvbqYequqF',
    'database': 'railway',
    'host': 'postgres.railway.internal',
    'port': '5432',
}

_pg_pool = None  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

async def get_pg_pool():
    global _pg_pool  # –°–ù–ê–ß–ê–õ–ê –æ–±—ä—è–≤–ª—è–µ–º global ‚Äî –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º
    if _pg_pool is None:
        print("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
        _pg_pool = await asyncpg.create_pool(
            **DB_CONFIG,
            min_size=1,
            max_size=5,
            max_inactive_connection_lifetime=60,
            max_queries=50000
        )
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL.")
    return _pg_pool





async def execute(query, *args):
    print("üì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞...")
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        async with conn.transaction():
            await conn.execute(query, *args)

async def fetchrow(query, *args):
    print("üì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞...")
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        async with conn.transaction():
            return await conn.fetchrow(query, *args)

async def fetchall(query, *args):
    print("üì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞...")
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        async with conn.transaction():
            return await conn.fetch(query, *args)
async def fetchval(query, *args):
    print("üì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞...")
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        async with conn.transaction():
            return await conn.fetchval(query, *args)
async def init_db():
    print("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ...")
    pool = await get_pg_pool()
    async with pool.acquire() as conn:
        await conn.execute("SELECT 1")  # –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

def activate_uc_code(player_id, code):
    headers = {
        "Authorization": f"Bearer {API_TOKEN}",
        "Content-Type": "application/json"
    }
    payload = {
        "codeType": "UC",
        "playerId": str(player_id),
        "code": code
    }

    try:
        response = requests.post(API_URL, headers=headers, json=payload)
        if response.status_code == 200:
            data = response.json()
            if data.get("success"):
                return True, f"‚úÖ UC-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è ID {player_id}"
            else:
                return False, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥: {data.get('message')}"
        else:
            return False, f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}"
    except Exception as e:
        return False, f"üö´ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}"


main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö—É–ø–∏—Ç—å UC"), KeyboardButton(text="UC –≤ –Ω–∞–ª–∏—á–∏–∏")],
        [KeyboardButton(text="–ü–æ–º–æ—â—å"), KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å")]
    ],
    resize_keyboard=True
)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
YOOMONEY_WALLET = "4100111899459093"

# === Bot config ===
BOT_TOKEN = "7587423228:AAHhVNFsKeWo8ck7xdDL1U8NHzTFsqDgZBE"
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
dp.include_router(admin_router)

class UCState(StatesGroup):
    choosing_quantity = State()
    choosing_payment_method = State()
    waiting_for_receipt_photo = State()
    waiting_for_umoney_payment = State()
    entering_pubg_id = State()
class AdminState(StatesGroup):
    waiting_for_code = State()

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)

    if user is None:
        await execute(
            "INSERT INTO users (user_id, username, first_name, reg_date) VALUES ($1, $2, $3, $4)",
            user_id,
            message.from_user.username,
            message.from_user.first_name,
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        )

    result = await fetchrow("SELECT pubg_id FROM users WHERE user_id = $1", user_id)
    if not result or not result['pubg_id']:
        await state.set_state(UCState.entering_pubg_id)

        await message.answer(
            "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Å–≤–æ–π PUBG ID.\n"
            "–ï—Å–ª–∏ ID —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –∫–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç.\n"
            "‚ùó –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π ID –Ω–µ—Å—ë—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—å.",
            parse_mode="HTML"
        )
        await message.answer("üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π PUBG ID, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return

    await state.clear()
    await message.answer(
        "‚ö°Ô∏è–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –±–æ—Ç–µ –ø–æ–∫—É–ø–∫–∏ UC –∫–æ–¥–æ–≤ üî•\n\n"
        "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞: https://t.me/CHUDO_UC_SHOP\n\n"
        "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 —Å –ø–∞–∫–∞–º–∏ –æ—Ç 60 UC\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã: @chudoo_19",
        reply_markup=main_menu_kb
    )


@dp.message(F.text == "UC –≤ –Ω–∞–ª–∏—á–∏–∏")
async def uc_in_stock(message: Message):
    stock_info = "<b>üì¶ UC –≤ –Ω–∞–ª–∏—á–∏–∏:</b>\n\n"
    for label in ["60 UC", "325 UC", "660 UC", "1800 UC", "3850 UC", "8100 UC"]:
        count = await fetchval(
            "SELECT COUNT(*) FROM uc_codes WHERE label = $1 AND used = FALSE",
            label
        )
        stock_info += f"‚Ä¢ {label} ‚Äî {count} —à—Ç.\n"
    await message.answer(stock_info)


@dp.message(F.text == "–ö—É–ø–∏—Ç—å UC")
async def show_categories(message: Message):
    kb = ReplyKeyboardBuilder()
    kb.button(text="UC Pubg Mobile")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup(resize_keyboard=True))


@dp.message(UCState.entering_pubg_id)
async def handle_pubg_id(message: Message, state: FSMContext):
    pubg_id = message.text.strip()
    user_id = message.from_user.id

    await execute(
        "UPDATE users SET pubg_id = $1 WHERE user_id = $2",
        pubg_id, user_id
    )

    kb = ReplyKeyboardBuilder()
    kb.button(text="–ö—É–ø–∏—Ç—å UC")
    kb.button(text="UC –≤ –Ω–∞–ª–∏—á–∏–∏")
    kb.button(text="–ü–æ–º–æ—â—å")
    kb.button(text="–ü—Ä–æ—Ñ–∏–ª—å")
    kb.adjust(2)

    await state.clear()
    await message.answer(
        "‚ö°Ô∏è–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –±–æ—Ç–µ –ø–æ–∫—É–ø–∫–∏ UC –∫–æ–¥–æ–≤ üî•\n\n"
        "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞: https://t.me/CHUDO_UC_SHOP\n\n"
        "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 —Å –ø–∞–∫–∞–º–∏ –æ—Ç 60 UC\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã: @chudoo_19",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )


@dp.message(F.text == "UC Pubg Mobile")
async def show_uc_packages(message: Message):
    kb = ReplyKeyboardBuilder()
    for label, price in [("60 UC", 2), ("325 UC", 390), ("660 UC", 800),
                         ("1800 UC", 2050), ("3850 UC", 4000), ("8100 UC", 7700)]:
        count = await fetchval(
            "SELECT COUNT(*) FROM uc_codes WHERE label = $1 AND used = FALSE",
            label
        )
        kb.button(text=f"{label} | {price} RUB | {count} —à—Ç.")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    kb.adjust(1)
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: UC Pubg Mobile", reply_markup=kb.as_markup(resize_keyboard=True))


async def send_quantity_menu(message: Message, quantity: int, unit_price: int, label: str):
    total_price = quantity * unit_price
    kb = ReplyKeyboardBuilder()
    for val in [-5, -3, -1, +1, +3, +5]:
        kb.button(text=f"{'+' if val > 0 else ''}{val}")
    kb.adjust(3)
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    kb.button(text="üîô –ù–∞–∑–∞–¥")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    kb.adjust(2)
    await message.answer(
        f"<b>üõí –¢–æ–≤–∞—Ä:</b> {label}\n"
        f"<b>üí∞ –¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É:</b> {unit_price} RUB\n"
        f"<b>üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n"
        f"<b>üí∏ –û–±—â–∞—è —Å—É–º–º–∞:</b> {total_price} RUB",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )


async def handle_uc_package(message: Message, state: FSMContext, label: str, unit_price: int):
    await state.set_state(UCState.choosing_quantity)
    await state.update_data(quantity=1, unit_price=unit_price, label=label)
    await send_quantity_menu(message, 1, unit_price, label)


uc_packages = [("60 UC", 2), ("325 UC", 390), ("660 UC", 800),
               ("1800 UC", 2050), ("3850 UC", 4000), ("8100 UC", 7700)]

for label, price in uc_packages:
    @dp.message(F.text.startswith(label))
    async def handle(message: Message, state: FSMContext, lbl=label, prc=price):
        await handle_uc_package(message, state, lbl, prc)


@dp.message(UCState.choosing_quantity, F.text.in_({"+1", "+3", "+5", "-1", "-3", "-5"}))
async def change_quantity(message: Message, state: FSMContext):
    data = await state.get_data()
    quantity = max(1, data.get("quantity", 1) + int(message.text))
    await state.update_data(quantity=quantity)
    await send_quantity_menu(message, quantity, data.get("unit_price", 0), data.get("label", "UC"))


@dp.message(UCState.choosing_quantity, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")
async def confirm_order(message: Message, state: FSMContext):
    data = await state.get_data()
    quantity    = data["quantity"]
    unit_price  = data["unit_price"]
    label       = data["label"]
    total_price = quantity * unit_price

    # –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ
    available = await fetchval(
        "SELECT COUNT(*) FROM uc_codes WHERE label = $1 AND used = FALSE",
        label
    )

    if available < quantity:
        kb = ReplyKeyboardBuilder()
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
        kb.adjust(1)
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ UC-–∫–æ–¥–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏ –¥–ª—è {label}.\n"
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {quantity}, –¥–æ—Å—Ç—É–ø–Ω–æ: {available}.",
            reply_markup=kb.as_markup(resize_keyboard=True)
        )
        return

    user_id = message.from_user.id
    row = await fetchrow(
        """
        INSERT INTO orders (user_id, label, quantity, price)
        VALUES ($1, $2, $3, $4)
        RETURNING id
        """,
        user_id, label, quantity, total_price
    )
    order_id = row["id"]

    await state.update_data(order_id=order_id)

    await state.set_state(UCState.choosing_payment_method)
    kb = ReplyKeyboardBuilder()
    kb.button(text="üí≥ –û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É")
    kb.button(text="üü£ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –Æ-Money")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    kb.adjust(1)

    await message.answer(
        f"<b>üßæ –í—ã –≤—ã–±—Ä–∞–ª–∏:</b>\n"
        f"{quantity} x {label}\n"
        f"<b>üí∏ –ö –æ–ø–ª–∞—Ç–µ:</b> {total_price} RUB\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )


@dp.message(UCState.choosing_payment_method, F.text == "üí≥ –û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É")
async def payment_by_card(message: Message, state: FSMContext):
    data = await state.get_data()
    quantity = data.get("quantity", 1)
    unit_price = data.get("unit_price", 0)
    label = data.get("label", "UC")
    total_price = quantity * unit_price
    now = datetime.now()

    await message.answer(
        f"üì¶ <b>–¢–æ–≤–∞—Ä:</b> {label}\n"
        f"üí∞ <b>–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É:</b> {unit_price} RUB\n"
        f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n"
        f"üí∏ <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> {total_price} RUB\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {now.strftime('%H:%M')}\n\n"
        f"üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n"
        f"<code>2202 2084 3750 2835</code> (–°–ë–ü)\n"
        f"<code>+79648469752</code> (–ê–ª—å—Ñ–∞ –ë–∞–Ω–∫)\n\n"
        f"<b>‚ùóÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã</b>."
    )

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

    await message.answer("–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.", reply_markup=kb)


@dp.message(F.text == "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")
async def handle_payment_confirmation(message: Message, state: FSMContext):
    await message.answer("üí≥ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ (—Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞).")
    await state.set_state(UCState.waiting_for_receipt_photo)


@dp.message(UCState.waiting_for_receipt_photo, F.photo)
async def handle_receipt_photo(message: Message, state: FSMContext):
    photo = message.photo[-1] if message.photo else None
    if not photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")
        return

    ADMIN_IDS = [1073756996, 1001953510, 1349751236]
    user = message.from_user

    try:
        await message.bot.edit_message_reply_markup(
            chat_id=message.chat.id,
            message_id=message.message_id - 1,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[])
        )
    except Exception as e:
        print(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")

    caption = (
        f"üì© –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –ø–æ –∫–∞—Ä—Ç–µ!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–±–µ–∑ username'}\n"
        f"üÜî ID: {user.id}\n"
        f"üëÅ –ò–º—è: {user.first_name}\n\n"
        f"üßæ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ–∫:"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", callback_data=f"confirm_{user.id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑", callback_data=f"reject_{user.id}")]
    ])

    for admin_id in ADMIN_IDS:
        try:
            await message.bot.send_photo(
                chat_id=admin_id,
                photo=photo.file_id,
                caption=caption,
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await message.answer("‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ú—ã —Å–æ–æ–±—â–∏–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –æ–ø–ª–∞—Ç—É.")
    await state.clear()


@dp.callback_query(F.data.startswith("confirm_"))
async def confirm_payment(call: CallbackQuery):
    user_id = int(call.data.split("_")[1])
    order = await fetchrow(
        "SELECT id, label, quantity FROM orders WHERE user_id = $1 AND status = 'pending' ORDER BY id DESC LIMIT 1",
        user_id
    )

    if not order:
        await call.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    order_id = order['id']
    label = order['label']
    quantity = order['quantity']

    codes = await fetchall(
        "SELECT id, code FROM uc_codes WHERE label = $1 AND used = FALSE LIMIT $2",
        label, quantity
    )

    if len(codes) < quantity:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–¥–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏.", show_alert=True)
        return

    try:
        for code in codes:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞",
                                      callback_data=f"activate:{code['code']}:{user_id}")],
                [InlineKeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å Midasbuy",
                                      url="https://www.midasbuy.com/midasbuy/ru/redeem/pubgm")]
            ])

            await bot.send_message(
                chat_id=user_id,
                text=f"üéÅ –í–∞—à UC-–∫–æ–¥ ({label}):\n\n<code>{code['code']}</code>",
                reply_markup=keyboard,
                parse_mode="HTML"
            )

            await execute(
                "UPDATE uc_codes SET used = TRUE WHERE id = $1",
                code['id']
            )

        await execute(
            "UPDATE orders SET status = 'completed' WHERE id = $1",
            order_id
        )

        admin_msg = (
                f"üì§ –í—ã–¥–∞–Ω—ã –∫–æ–¥—ã:\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n"
                f"üí≥ –°–ø–æ—Å–æ–±: –ö–ê–†–¢–ê\n"
                f"üè∑ –ü–∞–∫–µ—Ç: {label}\n"
                f"üî¢ –ö–æ–ª-–≤–æ: {quantity}\n"
                f"üéÅ –ö–æ–¥—ã:\n" + "\n".join(f"<code>{code['code']}</code>" for code in codes)
        )

        ADMIN_IDS = [1073756996, 1001953510, 1349751236]
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, admin_msg, parse_mode="HTML")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É: {e}")

        kb = ReplyKeyboardBuilder()
        kb.button(text="–ö—É–ø–∏—Ç—å UC")
        kb.button(text="UC –≤ –Ω–∞–ª–∏—á–∏–∏")
        kb.button(text="–ü–æ–º–æ—â—å")
        kb.button(text="–ü—Ä–æ—Ñ–∏–ª—å")
        kb.adjust(2)

        await bot.send_message(
            chat_id=user_id,
            text="üì≤ –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb.as_markup(resize_keyboard=True)
        )

        await call.answer("–ö–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚úÖ", show_alert=True)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–¥–æ–≤: {e}")
        await call.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥—ã.", show_alert=True)


@dp.callback_query(F.data.startswith("activate:"))
async def handle_activation_callback(callback_query: CallbackQuery):
    await callback_query.answer()
    _, code, user_id = callback_query.data.split(":")
    user_id = int(user_id)

    result = await fetchrow(
        "SELECT pubg_id FROM users WHERE user_id = $1",
        user_id
    )

    if result and result['pubg_id']:
        player_id = result['pubg_id']
        success, msg = activate_uc_code(player_id, code)
    else:
        msg = "‚ùå PUBG ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞."

    await bot.send_message(callback_query.from_user.id, msg)


@dp.callback_query(F.data.startswith("reject_"))
async def reject_payment(call: CallbackQuery):
    user_id = int(call.data.split("_")[1])
    try:
        await bot.send_message(
            user_id,
            "‚ùå –í–∞—à —á–µ–∫ –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @chudoo_19."
        )
        await call.answer("–û—Ç–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", show_alert=True)
    except:
        await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")


@dp.message(UCState.waiting_for_receipt_photo)
async def invalid_receipt(message: Message):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ —á–µ–∫–∞.")


@dp.message(UCState.choosing_payment_method, F.text == "üü£ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –Æ-Money")
async def payment_umoney(message: Message, state: FSMContext):
    data = await state.get_data()
    quantity = data.get("quantity", 1)
    unit_price = data.get("unit_price", 0)
    label = data.get("label", "UC")
    total_price = quantity * unit_price
    order_id = data.get("order_id")
    user_id = message.from_user.id

    if not order_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
        return

    yoomoney_label = f"{user_id}_{order_id}_{int(datetime.now().timestamp())}"

    await execute(
        "UPDATE orders SET yoomoney_label = $1 WHERE id = $2",
        yoomoney_label, order_id
    )

    quickpay = Quickpay(
        receiver="4100111899459093",
        quickpay_form="shop",
        targets="Sponsor this project",
        paymentType="AB",
        sum=total_price,
        label=yoomoney_label
    )

    pay_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆMoney", url=quickpay.redirected_url)],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")]
    ])

    await message.answer(
        f"<b>üì¶ –¢–æ–≤–∞—Ä:</b> {label}\n"
        f"<b>üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:</b> {unit_price} RUB\n"
        f"<b>üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n"
        f"<b>üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:</b> {total_price} RUB\n"
        f"<b>‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> 30 –º–∏–Ω—É—Ç\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=pay_kb
    )

    await state.set_state(UCState.waiting_for_umoney_payment)


@dp.message(UCState.choosing_payment_method, F.text == "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")
async def wait_for_umoney_check(message: Message, state: FSMContext):
    await message.answer(
        "‚è≥ <b>–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...</b>\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."
    )
    await state.clear()


@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_any_state(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                         reply_markup=main_menu_kb)


@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
async def back_to_categories(message: Message):
    kb = ReplyKeyboardBuilder()
    kb.button(text="UC Pubg Mobile")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup(resize_keyboard=True))

@admin_router.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id not in [1001953510]:  # üîÅ –î–æ–±–∞–≤—å —Å–≤–æ–∏—Ö –∞–¥–º–∏–Ω–æ–≤
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥", callback_data="admin_add_code")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–æ–¥", callback_data="admin_delete_code")],
        [InlineKeyboardButton(text="üìã –í—Å–µ –∫–æ–¥—ã", callback_data="admin_list_codes")],
        [InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_active_orders")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ –ø–æ ID", callback_data="admin_search_order")],
        [InlineKeyboardButton(text="üë§ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_all_users")],
        [InlineKeyboardButton(text="üßπ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_user")]
    ])
@admin_router.callback_query(F.data == "admin_add_code")
async def handle_add_code_callback(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üîß –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:")
    # –ó–¥–µ—Å—å –ø–æ—Ç–æ–º FSM ‚Üí add_code_state

@admin_router.callback_query(F.data == "admin_delete_code")
async def handle_delete_code_callback(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üßπ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    # FSM ‚Üí delete_code_state

@admin_router.callback_query(F.data == "admin_list_codes")
async def handle_list_codes_callback(callback_query: CallbackQuery):
    await callback_query.message.answer("üìã –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤—Å–µ –∫–æ–¥—ã.")
    # –¢—É—Ç –≤ –±—É–¥—É—â–µ–º ‚Äî SELECT –∏–∑ –±–∞–∑—ã –∏ –≤—ã–≤–æ–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏

@admin_router.callback_query(F.data == "admin_active_orders")
async def handle_active_orders_callback(callback_query: CallbackQuery):
    await callback_query.message.answer("üì¶ –ó–¥–µ—Å—å –±—É–¥—É—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ (pending) –∑–∞–∫–∞–∑—ã.")
    # SELECT * FROM orders WHERE status = 'pending'

@admin_router.callback_query(F.data == "admin_search_order")
async def handle_search_order_callback(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ order_id –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞:")
    # FSM ‚Üí search_order_state

@admin_router.callback_query(F.data == "admin_all_users")
async def handle_all_users_callback(callback_query: CallbackQuery):
    await callback_query.message.answer("üë• –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    # SELECT * FROM users LIMIT 10 –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–¥–æ–±–Ω–æ–µ

@admin_router.callback_query(F.data == "admin_delete_user")
async def handle_delete_user_callback(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üßπ –í–≤–µ–¥–∏—Ç–µ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")
    # FSM ‚Üí delete_user_state
    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)
@admin_router.message(AdminState.waiting_for_code)
async def process_new_code(message: Message, state: FSMContext):
    code_text = message.text.strip()

    if not code_text:
        await message.answer("‚ùå –ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    try:
        conn = psycopg2.connect(DATABASE_URL, sslmode="require")
        cursor = conn.cursor()

        # –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å label –∏ price –Ω–∞ –Ω—É–∂–Ω—ã–µ
        label = "default"
        price = 0
        cursor.execute(
            "INSERT INTO uc_codes (code, label, price, used) VALUES (%s, %s, %s, FALSE)",
            (code_text, label, price)
        )

        conn.commit()
        cursor.close()
        conn.close()

        await message.answer(f"‚úÖ –ö–æ–¥ <code>{code_text}</code> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–∞: {e}")

    await state.clear()
@dp.message(F.text == "–ü–æ–º–æ—â—å")
async def help_msg(message: Message):
    await message.answer("‚ÑπÔ∏è –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @chudoo_19")


@dp.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = await fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)

    if not user:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    text = (
        f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"–ò–º—è: {user['first_name']}\n"
        f"Username: @{user['username']}\n"
        f"ID: {user['user_id']}\n"
        f"üéÆ PUBG ID: <code>{user['pubg_id'] if user['pubg_id'] else '–Ω–µ —É–∫–∞–∑–∞–Ω'}</code>\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['reg_date']}\n\n"
        f"<b>üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n"
    )

    orders = await fetchall(
        "SELECT id, label, quantity, price, status, created_at FROM orders "
        "WHERE user_id = $1 ORDER BY created_at DESC LIMIT 5",
        user_id
    )

    btns = []
    for order in orders:
        status_text = {
            "completed": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω",
            "cancelled": "‚ùå –û—Ç–º–µ–Ω—ë–Ω"
        }.get(order['status'], "‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ")

        text += f"‚Ä¢ {order['quantity']} x {order['label']} ‚Äî {order['price']} RUB ({order['created_at']}) ‚Äî {status_text}\n"

        if order['status'] == 'pending':
            btns.append([InlineKeyboardButton(
                text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ #{order['id']}",
                callback_data=f"cancel_{order['id']}"
            )])

    btns.append([InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å PUBG ID", callback_data="change_pubg_id")])
    kb = InlineKeyboardMarkup(inline_keyboard=btns)
    await message.answer(text, reply_markup=kb, parse_mode="HTML")


@dp.callback_query(F.data.startswith("cancel_"))
async def cancel_order_callback(call: CallbackQuery, state: FSMContext):
    try:
        order_id = int(call.data.split("_")[1])
        user_id = call.from_user.id

        status = await fetchval(
            "SELECT status FROM orders WHERE id = $1 AND user_id = $2",
            order_id, user_id
        )

        if status in ("cancelled", "completed"):
            await call.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–º–µ–Ω—ë–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω.", show_alert=True)
            return

        await execute(
            "UPDATE orders SET status = 'cancelled' WHERE id = $1 AND user_id = $2",
            order_id, user_id
        )

        await call.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
        await bot.send_message(
            chat_id=user_id,
            text="üì≤ –í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_kb
        )

        await state.clear()
        await call.answer("‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ")
    except Exception as e:
        print(f"[‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã] {e}")
        await call.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞", show_alert=True)


@dp.callback_query(F.data == "change_pubg_id")
async def change_pubg_id(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π PUBG ID:")
    await state.set_state(UCState.entering_pubg_id)


ADMIN_IDS = [ 1001953510 ]


async def notify_admin_all_codes():
    async with _pg_pool.acquire() as conn:
        all_codes = await conn.fetch("SELECT code, label, used FROM uc_codes")

    if not all_codes:
        return

    msg = "üì¶ –í—Å–µ UC-–∫–æ–¥—ã –≤ –±–∞–∑–µ:\n\n"
    for i, code in enumerate(all_codes, 1):
        status = "‚úÖ" if code['used'] else "üü¢"
        msg += f"{i}. {status} <code>{code['code']}</code> ({code['label']})\n"

    chunks = [msg[i:i + 4000] for i in range(0, len(msg), 4000)]

    for admin_id in ADMIN_IDS:
        for chunk in chunks:
            try:
                await bot.send_message(chat_id=admin_id, text=chunk)
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {admin_id}: {e}")


async def on_startup(dispatcher):
    await init_db()
    await notify_admin_all_codes()


async def main():
    try:
        dp.startup.register(on_startup)
        await dp.start_polling(bot)
    finally:
        if _pg_pool is not None:
            await _pg_pool.close()
            print("üîí –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç.")




if __name__ == "__main__":
    asyncio.run(main())
    fetch = fetchall
