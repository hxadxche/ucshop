
import asyncio
import sqlite3
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery


# === SQLite ===
conn = sqlite3.connect("users_orders.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        reg_date TEXT
    )
""")
cursor.execute("""
    CREATE TABLE IF NOT EXISTS uc_codes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        label TEXT,
        code TEXT,
        used INTEGER DEFAULT 0
    )
""")
conn.commit()
sample_data = [
    ("60 UC", "60CODE1"), ("60 UC", "60CODE2"),("60 UC", "60CODE3"),("60 UC", "60CODE4"),("60 UC", "60CODE5"),
    ("325 UC", "325CODE1"), ("325 UC", "325CODE2"),("325 UC", "325CODE3"), ("325 UC", "325CODE4"),
    ("385 UC", "385CODE1"), ("385 UC", "385CODE2"),("385 UC", "385CODE3"), ("385 UC", "385CODE4"),
    ("660 UC", "660CODE1"), ("660 UC", "660CODE2"),("660 UC", "660CODE3"), ("660 UC", "660CODE4"),
    ("720 UC", "720CODE1"), ("720 UC", "720CODE2"),("720 UC", "720CODE3"), ("720 UC", "720CODE4"),
    ("1320 UC", "1320CODE1"), ("1320 UC", "1320CODE2"),("1320 UC", "1320CODE3"), ("1320 UC", "1320CODE4"),
]
# –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –±—ã–ª–∏)
#cursor.execute("DELETE FROM uc_codes")

# –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
for label, code in sample_data:
    cursor.execute("INSERT INTO uc_codes (label, code) VALUES (?, ?)", (label, code))

conn.commit()

# –ü–æ–∫–∞–∂–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã
cursor.execute("SELECT label, code FROM uc_codes WHERE used = 0 ORDER BY id")
available_codes = cursor.fetchall()
available_codes
conn.commit()

sample_data = [
    ("60 UC", "60CODE1"), ("60 UC", "60CODE2"),("60 UC", "60CODE3"),("60 UC", "60CODE4"),("60 UC", "60CODE5"),
    ("325 UC", "325CODE1"), ("325 UC", "325CODE2"),("325 UC", "325CODE3"), ("325 UC", "325CODE4"),
    ("385 UC", "385CODE1"), ("385 UC", "385CODE2"),("385 UC", "385CODE3"), ("385 UC", "385CODE4"),
    ("660 UC", "660CODE1"), ("660 UC", "660CODE2"),("660 UC", "660CODE3"), ("660 UC", "660CODE4"),
    ("720 UC", "720CODE1"), ("720 UC", "720CODE2"),("720 UC", "720CODE3"), ("720 UC", "720CODE4"),
    ("1320 UC", "1320CODE1"), ("1320 UC", "1320CODE2"),("1320 UC", "1320CODE3"), ("1320 UC", "1320CODE4"),

]
cursor.execute("SELECT COUNT(*) FROM uc_codes")
if cursor.fetchone()[0] == 0:
    for label, code in sample_data:
        cursor.execute("INSERT INTO uc_codes (label, code) VALUES (?, ?)", (label, code))
    conn.commit()

# === Bot config ===
API_TOKEN = "8024102805:AAEcu22cIkfe49UNNC_XlKB1mZMxFRx6aDk"
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class UCState(StatesGroup):
    choosing_quantity = State()
    choosing_payment_method = State()
    waiting_for_receipt_photo = State()

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute(
            "INSERT INTO users (user_id, username, first_name, reg_date) VALUES (?, ?, ?, ?)",
            (user_id, message.from_user.username, message.from_user.first_name, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        )
        conn.commit()

    kb = ReplyKeyboardBuilder()
    kb.button(text="–ö—É–ø–∏—Ç—å UC")
    kb.button(text="UC –≤ –Ω–∞–ª–∏—á–∏–∏")
    kb.button(text="–ü–æ–º–æ—â—å")
    kb.button(text="–ü—Ä–æ—Ñ–∏–ª—å")
    kb.adjust(2)

    await state.clear()
    await message.answer(
        "‚ö°Ô∏è–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –±–æ—Ç–µ –ø–æ–∫—É–ø–∫–∏ UC –∫–æ–¥–æ–≤ üî•\n\n"
        "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞: https://t.me/CHUDO_UC_SHOP\n\n"
        "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 —Å –ø–∞–∫–∞–º–∏ –æ—Ç 60 UC\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã: @chudoo_19",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )

@dp.message(F.text == "UC –≤ –Ω–∞–ª–∏—á–∏–∏")
async def uc_in_stock(message: Message):
    stock_info = "<b>üì¶ UC –≤ –Ω–∞–ª–∏—á–∏–∏:</b>\n\n"
    for label in ["60 UC", "325 UC", "385 UC", "660 UC", "720 UC", "1320 UC"]:
        cursor.execute("SELECT COUNT(*) FROM uc_codes WHERE label = ? AND used = 0", (label,))
        count = cursor.fetchone()[0]
        stock_info += f"‚Ä¢ {label} ‚Äî {count} —à—Ç.\n"
    await message.answer(stock_info)

@dp.message(F.text == "–ö—É–ø–∏—Ç—å UC")
async def show_categories(message: Message):
    kb = ReplyKeyboardBuilder()
    kb.button(text="UC Pubg Mobile")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup(resize_keyboard=True))

@dp.message(F.text == "UC Pubg Mobile")
async def show_uc_packages(message: Message):
    kb = ReplyKeyboardBuilder()
    for label, price in [("60 UC", 80), ("325 UC", 380), ("385 UC", 450), ("660 UC", 790), ("720 UC", 900), ("1320 UC", 1580)]:
        cursor.execute("SELECT COUNT(*) FROM uc_codes WHERE label = ? AND used = 0", (label,))
        count = cursor.fetchone()[0]
        kb.button(text=f"{label} | {price} RUB | {count} —à—Ç.")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    kb.adjust(1)
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: UC Pubg Mobile", reply_markup=kb.as_markup(resize_keyboard=True))

async def send_quantity_menu(message: Message, quantity: int, unit_price: int, label: str):
    total_price = quantity * unit_price
    kb = ReplyKeyboardBuilder()
    for val in [-5, -3, -1, +1, +3, +5]:
        kb.button(text=f"{'+' if val > 0 else ''}{val}")
    kb.adjust(3)
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    kb.button(text="üîô –ù–∞–∑–∞–¥")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    kb.adjust(2)
    await message.answer(
        f"<b>üõí –¢–æ–≤–∞—Ä:</b> {label}\n"
        f"<b>üí∞ –¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É:</b> {unit_price} RUB\n"
        f"<b>üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n"
        f"<b>üí∏ –û–±—â–∞—è —Å—É–º–º–∞:</b> {total_price} RUB",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )

async def handle_uc_package(message: Message, state: FSMContext, label: str, unit_price: int):
    await state.set_state(UCState.choosing_quantity)
    await state.update_data(quantity=1, unit_price=unit_price, label=label)
    await send_quantity_menu(message, 1, unit_price, label)

uc_packages = [("60 UC", 80), ("325 UC", 380), ("385 UC", 450), ("660 UC", 790), ("720 UC", 900), ("1320 UC", 1580)]

for label, price in uc_packages:
    def register_handler(lbl, prc):
        @dp.message(F.text.startswith(lbl))
        async def handle(message: Message, state: FSMContext):
            await handle_uc_package(message, state, lbl, prc)
    register_handler(label, price)


@dp.message(UCState.choosing_quantity, F.text.in_({"+1", "+3", "+5", "-1", "-3", "-5"}))
async def change_quantity(message: Message, state: FSMContext):
    data = await state.get_data()
    quantity = max(1, data.get("quantity", 1) + int(message.text))
    await state.update_data(quantity=quantity)
    await send_quantity_menu(message, quantity, data.get("unit_price", 0), data.get("label", "UC"))

@dp.message(UCState.choosing_quantity, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")
async def confirm_order(message: Message, state: FSMContext):
    data = await state.get_data()
    quantity    = data.get("quantity", 1)
    unit_price  = data.get("unit_price", 0)
    label       = data.get("label", "UC")
    total_price = quantity * unit_price

    # ‚îÄ‚îÄ‚îÄ –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    cursor.execute(
        "SELECT COUNT(*) FROM uc_codes WHERE label = ? AND used = 0",
        (label,)
    )
    available = cursor.fetchone()[0]

    if available < quantity:
        kb = ReplyKeyboardBuilder()
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
        kb.adjust(1)

        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ UC-–∫–æ–¥–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏ –¥–ª—è {label}.\n"
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {quantity}, –¥–æ—Å—Ç—É–ø–Ω–æ: {available}.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–∞–∫–µ—Ç.",
            reply_markup=kb.as_markup(resize_keyboard=True)
        )
        return
    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    # ‚Äî‚Äî‚Äî –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –ë–î —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º ‚Äî‚Äî‚Äî
    user_id = message.from_user.id
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute(
        "INSERT INTO orders (user_id, label, quantity, price, date) VALUES (?, ?, ?, ?, ?)",
        (user_id, label, quantity, total_price, now_str)
    )
    conn.commit()
    # ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

    # –µ—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
    await state.set_state(UCState.choosing_payment_method)
    kb = ReplyKeyboardBuilder()
    kb.button(text="üí≥ –û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É")
    kb.button(text="üü£ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –Æ-Money")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    kb.adjust(1)

    await message.answer(
        f"<b>üßæ –í—ã –≤—ã–±—Ä–∞–ª–∏:</b>\n"
        f"{quantity} x {label}\n"
        f"<b>üí∏ –ö –æ–ø–ª–∞—Ç–µ:</b> {total_price} RUB\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )

@dp.message(UCState.choosing_payment_method, F.text == "üü£ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –Æ-Money")
async def payment_umoney(message: Message, state: FSMContext):
    data = await state.get_data()
    print(f"[DEBUG] Payment state data: {data}")
    label = data.get("label", "UC")
    unit_price = data.get("unit_price", 0)
    quantity = data.get("quantity", 1)
    total_price = quantity * unit_price
    now = datetime.now()

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–Ø –æ–ø–ª–∞—Ç–∏–ª")], [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

    await message.answer(
        f"üì¶ <b>–¢–æ–≤–∞—Ä:</b> {label}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {unit_price} RUB\n"
        f"üì¶ <b>–ö–æ–ª-–≤–æ:</b> {quantity} —à—Ç.\n"
        f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</b> {now.strftime('%Y-%m-%d %H:%M')}\n"
        f"üí∏ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:</b> {total_price} RUB\n"
        "============================\n"
        f"‚ö†Ô∏è <b>–ü–ï–†–ï–í–û–î–ò–¢–¨ –°–¢–†–û–ì–û –£–ö–ê–ó–ê–ù–ù–£–Æ –°–£–ú–ú–£</b>\n"
        "–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –Ω–µ —Ç—É–¥–∞ ‚Äî –¥–µ–Ω—å–≥–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è.\n\n"
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <b>{total_price} RUB</b> –Ω–∞ –∫–∞—Ä—Ç—É:\n"
        "<code>2202 2084 3750 2835</code>\n"
        "–°–ë–ü - –ê–ª—å—Ñ–∞ –ë–∞–Ω–∫: <code>+79648469752</code>\n\n"
        "<b>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —á–µ–∫!</b>\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª</b> –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.",
        reply_markup=kb
    )

@dp.message(F.text == "–Ø –æ–ø–ª–∞—Ç–∏–ª")
async def handle_payment_confirmation(message: Message, state: FSMContext):
    await message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ (—Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞).")
    await state.set_state(UCState.waiting_for_receipt_photo)

@dp.message(UCState.waiting_for_receipt_photo, F.photo)
async def handle_receipt_photo(message: Message, state: FSMContext):
    ADMIN_ID = 1001953510
    user = message.from_user
    caption = (
        f"üì© –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂ –ø–æ –∫–∞—Ä—Ç–µ!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–±–µ–∑ username'}\n"
        f"üÜî ID: {user.id}\n"
        f"üëÅ –ò–º—è: {user.first_name}\n\n"
        f"üßæ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–µ–∫:"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", callback_data=f"confirm_{user.id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑", callback_data=f"reject_{user.id}")]
    ])

    await bot.send_photo(
        chat_id=ADMIN_ID,
        photo=message.photo[-1].file_id,
        caption=caption,
        reply_markup=keyboard
    )

    await message.answer("‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ú—ã —Å–æ–æ–±—â–∏–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –æ–ø–ª–∞—Ç—É.")
    await state.clear()
@dp.callback_query(F.data.startswith("confirm_"))
async def confirm_payment(call: CallbackQuery):
    user_id = int(call.data.split("_")[1])

    # 1) –î–æ—Å—Ç–∞–Ω–µ–º –∏–∑ orders –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute(
        "SELECT label, quantity FROM orders WHERE user_id = ? ORDER BY date DESC LIMIT 1",
        (user_id,)
    )
    order = cursor.fetchone()
    if not order:
        await call.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    label, quantity = order

    # 2) –í—ã–±–∏—Ä–∞–µ–º —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ –∫–æ–¥–æ–≤ –Ω—É–∂–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
    cursor.execute(
        "SELECT id, code FROM uc_codes WHERE label = ? AND used = 0 LIMIT ?",
        (label, quantity)
    )
    codes = cursor.fetchall()
    if len(codes) < quantity:
        await call.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–¥–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏.", show_alert=True)
        return

    # 3) –ü–æ–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
    code_ids = [row[0] for row in codes]
    cursor.executemany(
        "UPDATE uc_codes SET used = 1 WHERE id = ?",
        [(cid,) for cid in code_ids]
    )
    conn.commit()

    # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é _–∏–º–µ–Ω–Ω–æ_ —ç—Ç–∏ –∫–æ–¥—ã
    text = f"‚úÖ –í–∞—à –ø–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\nüéÅ –í–∞—à–∏ UC-–∫–æ–¥—ã ({label}):\n\n"
    text += "\n".join(f"<code>{row[1]}</code>" for row in codes)

    try:
        await bot.send_message(user_id, text)
        await call.answer("–ö–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚úÖ", show_alert=True)
    except:
        await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", show_alert=True)


@dp.callback_query(F.data.startswith("reject_"))
async def reject_payment(call: CallbackQuery):
    user_id = int(call.data.split("_")[1])
    try:
        await bot.send_message(user_id, "‚ùå –í–∞—à —á–µ–∫ –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É.\n–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @chudoo_19.")
        await call.answer("–û—Ç–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", show_alert=True)
    except:
        await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

@dp.message(UCState.waiting_for_receipt_photo)
async def invalid_receipt(message: Message):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ —á–µ–∫–∞.")

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

@dp.message(UCState.choosing_payment_method, F.text == "üü£ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –Æ-Money")
async def payment_umoney(message: Message, state: FSMContext):
    data = await state.get_data()
    quantity = data.get("quantity", 1)
    unit_price = data.get("unit_price", 0)
    label = data.get("label", "UC")
    total_price = quantity * unit_price
    order_id = data.get("order_id")
    user_id = message.from_user.id
    now = datetime.now()
    deadline = now + timedelta(minutes=30)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π label –¥–ª—è webhook
    if order_id:
        yoomoney_label = f"{user_id}_{order_id}"
        cursor.execute(
            "UPDATE orders SET payment_method = ?, yoomoney_label = ? WHERE id = ?",
            ("yoomoney", yoomoney_label, order_id))
        conn.commit()
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.")
        return

    # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å webhook URL
    payment_url = (
        f"https://yoomoney.ru/quickpay/confirm.xml?"
        f"receiver={YOOMONEY_WALLET}&"
        f"quickpay-form=shop&"
        f"targets=–û–ø–ª–∞—Ç–∞ UC –∫–æ–¥–æ–≤ (–∑–∞–∫–∞–∑ #{order_id})&"
        f"sum={total_price}&"
        f"label={yoomoney_label}&"
        f"notification_url=https://ucshop.up.railway.app/yoomoney_webhook&"
        f"paymentType=AC"
    )

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
    pay_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆMoney", url=payment_url)]
    ])

    await message.answer(
        f"<b>üì¶ –¢–æ–≤–∞—Ä:</b> {label}\n"
        f"<b>üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:</b> {unit_price} RUB\n"
        f"<b>üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n"
        f"<b>üí∏ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:</b> {total_price} RUB\n"
        f"<b>‚è∞ –í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> 30 –º–∏–Ω—É—Ç\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=pay_kb
    )

    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        f"‚åõÔ∏è <b>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ:</b> {deadline.strftime('%H:%M')}\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        reply_markup=kb
    )

    await state.set_state(UCState.choosing_payment_method)


@dp.message(UCState.choosing_payment_method, F.text == "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")
async def wait_for_umoney_check(message: Message, state: FSMContext):
    await message.answer(
        "‚è≥ <b>–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...</b>\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."
    )
    await state.clear()


@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_any_state(message: Message, state: FSMContext):
    await state.clear()

    kb = ReplyKeyboardBuilder()
    kb.button(text="–ö—É–ø–∏—Ç—å UC")
    kb.button(text="UC –≤ –Ω–∞–ª–∏—á–∏–∏")
    kb.button(text="–ü–æ–º–æ—â—å")
    kb.button(text="–ü—Ä–æ—Ñ–∏–ª—å")
    kb.adjust(2)

    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.as_markup(resize_keyboard=True))

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
async def back_to_categories(message: Message):
    kb = ReplyKeyboardBuilder()
    kb.button(text="UC Pubg Mobile")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup(resize_keyboard=True))

@dp.message(F.text == "–ü–æ–º–æ—â—å")
async def help_msg(message: Message):
    await message.answer("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @chudoo_19")

@dp.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message):
    user_id = message.from_user.id
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if not user:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    cursor.execute("SELECT label, quantity, price, date FROM orders WHERE user_id = ? ORDER BY date DESC LIMIT 5", (user_id,))
    orders = cursor.fetchall()
    text = (
        f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å</b>\n–ò–º—è: {user[2]}\nUsername: @{user[1]}\nID: {user[0]}\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[3]}\n\n"
        f"<b>üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n"
    )
    if orders:
        for label, qty, price, date in orders:
            text += f"‚Ä¢ {qty} x {label} ‚Äî {price} RUB ({date})\n"
    else:
        text += "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤."
    await message.answer(text)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
