import asyncio
import sqlite3
from datetime import datetime

from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup

# === SQLite ===
conn = sqlite3.connect("users_orders.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        reg_date TEXT
    )
""")
cursor.execute("""
    CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        label TEXT,
        quantity INTEGER,
        price INTEGER,
        date TEXT
    )
""")
conn.commit()

# === Bot config ===
API_TOKEN = "8024102805:AAEcu22cIkfe49UNNC_XlKB1mZMxFRx6aDk"
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())


class UCState(StatesGroup):
    choosing_quantity = State()


@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone() is None:
        cursor.execute(
            "INSERT INTO users (user_id, username, first_name, reg_date) VALUES (?, ?, ?, ?)",
            (user_id, message.from_user.username, message.from_user.first_name, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        )
        conn.commit()

    kb = ReplyKeyboardBuilder()
    kb.button(text="–ö—É–ø–∏—Ç—å UC")
    kb.button(text="UC –≤ –Ω–∞–ª–∏—á–∏–∏")
    kb.button(text="–ü–æ–º–æ—â—å")
    kb.button(text="–ü—Ä–æ—Ñ–∏–ª—å")
    kb.adjust(2)

    await state.clear()
    await message.answer(
        "‚ö°Ô∏è–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –±–æ—Ç–µ –ø–æ–∫—É–ø–∫–∏ UC –∫–æ–¥–æ–≤ üî•\n\n"
        "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞: https://t.me/CHUDO_UC_SHOP\n\n"
        "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 —Å –ø–∞–∫–∞–º–∏ –æ—Ç 60 UC\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã: @chudoo_19",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )


@dp.message(F.text == "–ö—É–ø–∏—Ç—å UC")
async def show_categories(message: Message):
    kb = ReplyKeyboardBuilder()
    kb.button(text="UC Pubg Mobile")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup(resize_keyboard=True))


@dp.message(F.text == "UC –≤ –Ω–∞–ª–∏—á–∏–∏")
async def uc_in_stock(message: Message):
    stock_info = (
        "<b>üì¶ UC –≤ –Ω–∞–ª–∏—á–∏–∏:</b>\n\n"
        "‚Ä¢ 60 UC ‚Äî 38 —à—Ç.\n"
        "‚Ä¢ 325 UC ‚Äî 17 —à—Ç.\n"
        "‚Ä¢ 385 UC ‚Äî 12 —à—Ç.\n"
        "‚Ä¢ 660 UC ‚Äî 9 —à—Ç.\n"
        "‚Ä¢ 720 UC ‚Äî 6 —à—Ç.\n"
        "‚Ä¢ 1320 UC ‚Äî 3 —à—Ç.\n"
    )
    await message.answer(stock_info)


@dp.message(F.text == "–ü–æ–º–æ—â—å")
async def help_message(message: Message):
    await message.answer("‚ÑπÔ∏è –î–ª—è –æ–∫–∞–∑–∞–Ω–∏—è –ø–æ–º–æ—â–∏ –ø–æ –±–æ—Ç—É –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫: @chudoo_19")


@dp.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def profile(message: Message):
    user_id = message.from_user.id
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if not user:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    cursor.execute("SELECT label, quantity, price, date FROM orders WHERE user_id = ? ORDER BY date DESC LIMIT 5", (user_id,))
    orders = cursor.fetchall()
    text = (
        f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"–ò–º—è: {user[2]}\n"
        f"Username: @{user[1] if user[1] else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"ID: {user[0]}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user[3]}\n\n"
        f"<b>üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n"
    )
    if orders:
        for label, qty, price, date in orders:
            text += f"‚Ä¢ {qty} x {label} ‚Äî {price} RUB ({date})\n"
    else:
        text += "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤."

    await message.answer(text)


@dp.message(F.text == "UC Pubg Mobile")
async def show_uc_packages(message: Message):
    kb = ReplyKeyboardBuilder()
    kb.button(text="60 UC | 80 RUB | 38 —à—Ç.")
    kb.button(text="325 UC | 380 RUB | 17 —à—Ç.")
    kb.button(text="385 UC | 450 RUB | 12 —à—Ç.")
    kb.button(text="660 UC | 790 RUB | 9 —à—Ç.")
    kb.button(text="720 UC | 900 RUB | 6 —à—Ç.")
    kb.button(text="1320 UC | 1580 RUB | 3 —à—Ç.")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    kb.adjust(1)
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: UC Pubg Mobile", reply_markup=kb.as_markup(resize_keyboard=True))


async def send_quantity_menu(message: Message, quantity: int, unit_price: int, label: str):
    total_price = quantity * unit_price
    kb = ReplyKeyboardBuilder()
    for val in [-5, -3, -1, +1, +3, +5]:
        kb.button(text=f"{'+' if val > 0 else ''}{val}")
    kb.adjust(3)
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞")
    kb.button(text="üîô –ù–∞–∑–∞–¥")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    kb.adjust(2)

    await message.answer(
        f"<b>üõí –¢–æ–≤–∞—Ä:</b> {label}\n"
        f"<b>üí∞ –¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É:</b> {unit_price} RUB\n"
        f"<b>üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n"
        f"<b>üí∏ –û–±—â–∞—è —Å—É–º–º–∞:</b> {total_price} RUB",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–∞–∫–µ—Ç–æ–≤ ===
async def handle_uc_package(message: Message, state: FSMContext, label: str, unit_price: int):
    await state.set_state(UCState.choosing_quantity)
    await state.update_data(quantity=1, unit_price=unit_price, label=label)
    await send_quantity_menu(message, 1, unit_price, label)


for label, price in [
    ("60 UC", 80),
    ("325 UC", 380),
    ("385 UC", 450),
    ("660 UC", 790),
    ("720 UC", 900),
    ("1320 UC", 1580),
]:
    @dp.message(F.text.startswith(label))
    async def _(message: Message, state: FSMContext, l=label, p=price):
        await handle_uc_package(message, state, l, p)


@dp.message(UCState.choosing_quantity, F.text.in_({"+1", "+3", "+5", "-1", "-3", "-5"}))
async def change_quantity(message: Message, state: FSMContext):
    data = await state.get_data()
    quantity = data.get("quantity", 1)
    unit_price = data.get("unit_price", 0)
    label = data.get("label", "UC")

    try:
        delta = int(message.text)
        quantity = max(1, quantity + delta)
        await state.update_data(quantity=quantity)
        await send_quantity_menu(message, quantity, unit_price, label)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")


@dp.message(UCState.choosing_quantity, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")
async def confirm_order(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    quantity = data.get("quantity", 1)
    unit_price = data.get("unit_price", 0)
    label = data.get("label", "UC")
    price = quantity * unit_price
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    cursor.execute(
        "INSERT INTO orders (user_id, label, quantity, price, date) VALUES (?, ?, ?, ?, ?)",
        (user_id, label, quantity, price, date)
    )
    conn.commit()

    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {quantity} —à—Ç. {label} (–æ–±—â–∞—è —Ü–µ–Ω–∞: {price} RUB)\n"
        "–î–∞–ª–µ–µ —Ä–µ–∞–ª–∏–∑—É–µ–º –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—é..."
    )
    await state.clear()


@dp.message(UCState.choosing_quantity, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_order(message: Message, state: FSMContext):
    await state.clear()
    kb = ReplyKeyboardBuilder()
    kb.button(text="–ö—É–ø–∏—Ç—å UC")
    kb.button(text="UC –≤ –Ω–∞–ª–∏—á–∏–∏")
    kb.button(text="–ü–æ–º–æ—â—å")
    kb.button(text="–ü—Ä–æ—Ñ–∏–ª—å")
    kb.adjust(2)
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.as_markup(resize_keyboard=True))


@dp.message(UCState.choosing_quantity, F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_package_list(message: Message):
    await show_uc_packages(message)


@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
async def back_to_categories(message: Message):
    kb = ReplyKeyboardBuilder()
    kb.button(text="UC Pubg Mobile")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup(resize_keyboard=True))


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
