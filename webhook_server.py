from flask import Flask, request, abort
import hashlib
import sqlite3
import asyncio
from aiogram import Bot
from aiogram.enums import ParseMode

app = Flask(__name__)

# üîê –°–µ–∫—Ä–µ—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ÆMoney
NOTIFICATION_SECRET = "sgtipI6iQlaXCB1XCgksTaP5"

# üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ SHA-1 –ø–æ–¥–ø–∏—Å–∏
def verify_sha1(data: dict):
    raw_string = (
        f"{data.get('notification_type')}&"
        f"{data.get('operation_id')}&"
        f"{data.get('amount')}&"
        f"{data.get('currency')}&"
        f"{data.get('datetime')}&"
        f"{data.get('sender')}&"
        f"{data.get('codepro')}&"
        f"{NOTIFICATION_SECRET}&"
        f"{data.get('label')}"
    )
    sha1 = hashlib.sha1(raw_string.encode("utf-8")).hexdigest()
    return sha1 == data.get("sha1_hash")

# üß† Webhook-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@app.route("/yoomoney_webhook", methods=["POST"])
def yoomoney_webhook():
    try:
        data = request.form.to_dict()
        print("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –ÆMoney:", data)

        if not verify_sha1(data):
            print("‚ùå –•—ç—à –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
            abort(400, "Invalid hash")

        label = data.get("label")
        if not label:
            print("‚ùå Label –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            abort(400, "Label is empty")

        # üì¶ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        conn = sqlite3.connect("users_orders.db")
        cursor = conn.cursor()

        # üìù –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
        cursor.execute(
            "SELECT label, quantity FROM orders WHERE user_id = ? ORDER BY date DESC LIMIT 1",
            (label,)
        )
        result = cursor.fetchone()
        if not result:
            print("‚ö†Ô∏è –ó–∞–∫–∞–∑ –ø–æ label –Ω–µ –Ω–∞–π–¥–µ–Ω")
            conn.close()
            return "No order", 200

        pack_label, quantity = result
        print(f"üì¶ –ó–∞–∫–∞–∑: {pack_label}, {quantity} —à—Ç.")

        # üßæ –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã
        cursor.execute(
            "SELECT id, code FROM uc_codes WHERE label = ? AND used = 0 LIMIT ?",
            (pack_label, quantity)
        )
        codes = cursor.fetchall()

        if len(codes) < quantity:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–¥–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏")
            conn.close()
            return "Not enough codes", 200

        # ‚úÖ –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã
        code_ids = [c[0] for c in codes]
        cursor.executemany("UPDATE uc_codes SET used = 1 WHERE id = ?", [(i,) for i in code_ids])
        conn.commit()

        # üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        bot = Bot(token="8024102805:AAEcu22cIkfe49UNNC_XlKB1mZMxFRx6aDk", parse_mode=ParseMode.HTML)

        text = f"‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\nüéÅ –í–∞—à–∏ UC-–∫–æ–¥—ã ({pack_label}):\n\n"
        text += "\n".join(f"<code>{c[1]}</code>" for c in codes)

        asyncio.run(bot.send_message(chat_id=int(label), text=text))

        conn.close()
        return "OK", 200

    except Exception as e:
        print("üî• –û–®–ò–ë–ö–ê –í –í–ï–ë–•–£–ö–ï:", e)
        return "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", 500

# üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)
